@page "/recipes"
@rendermode InteractiveServer
@using ManagedRedisLevelUp.Shared
@using Microsoft.AspNetCore.Components.Forms
@inject RecipeApiClient RecipeApiClient

<EditForm Model="@recipe" OnValidSubmit="@HandleValidSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div class="my-2">
    <label for="name">Name:</label>
    <InputText id="name" @bind-Value="@recipe.Name" class="form-control" />
  </div>
  <div class="my-2">
    <label for="totalTimeInMinutes">Total Time (in minutes):</label>
    <InputNumber id="totalTimeInMinutes" @bind-Value="@recipe.TotalTimeInMinutes" class="form-control" />
  </div>
  <div class="my-2">
    <label for="description">Description:</label>
    <InputTextArea id="description" @bind-Value="@recipe.Description" class="form-control" />
  </div>
  <div class="my-2">
    <label for="ingredients">Ingredients:</label>
    @for (int i = 0; i < recipe.Ingredients.Count; i++)
    {
      var ingredientIndex = i;
      var ingredient = recipe.Ingredients[ingredientIndex];

      <div class="input-group mb-2">
        <input type="text" value="@ingredient" @oninput="(e) => UpdateIngredient(e, ingredientIndex)" class="form-control" />
        <button type="button" class="btn btn-danger" @onclick="() => RemoveIngredient(ingredientIndex)">Remove</button>
      </div>
    }
    <button type="button" class="btn btn-sm btn-secondary" @onclick="AddIngredient">Add Ingredient</button>
  </div>
  <div class="my-2">
    <label for="steps">Steps:</label>
    @for (int i = 0; i < recipe.Steps.Count; i++)
    {
      var stepIndex = i;
      var step = recipe.Steps[stepIndex];

      <div class="input-group mb-2">
        <input type="text" value="@step" @oninput="(e) => UpdateStep(e, stepIndex)" class="form-control" />
        <button type="button" class="btn btn-danger" @onclick="() => RemoveStep(stepIndex)">Remove</button>
      </div>
    }
    <button type="button" class="btn btn-sm btn-secondary" @onclick="AddStep">Add Step</button>
  </div>

  <div class="mt-2">
    @if (RecipeList.Any(r => r.Key == recipe.Key))
    {
      <button type="submit" class="btn btn-primary">
        Update Recipe
      </button>
    }
    else
    {
      <button type="submit" class="btn btn-primary">
        Create Recipe
      </button>
    }
  </div>
</EditForm>

<EditForm Model="RecipeKey" OnValidSubmit="GetRecipe">
  <div class="my-4">
    <label for="key">Get Recipe By Key:</label>
    <input id="key" @bind="@RecipeKey" class="form-control" />
    <button type="submit" class="btn btn-primary mt-2" @onclick="GetRecipe">Get Recipe</button>
  </div>
</EditForm>

<EditForm Model="SearchString" OnValidSubmit="SearchRecipes">
  <div class="my-4">
    <div>
      <label for="search">Search:</label>
      <input id="search" class="form-control" @bind="SearchString" />
    </div>

    <div class="d-flex mt-2">
      <button type="submit" class="btn btn-primary mr-2" @onclick="SearchRecipes">Search Recipes</button>

      <div class="mx-2">
        <button type="button" class="btn btn-secondary" @onclick="GetRecipes">Get 10 Recipes</button>
      </div>

      <div class="mx-2">
        <button type="button" class="btn btn-secondary" @onclick="() => Clear()">Clear Results</button>
      </div>
    </div>
  </div>
</EditForm>

@if (RecipeList.Count > 0)
{
  <h3 class="mt-5">Results</h3>
  <div class="d-flex flex-wrap">
    @foreach (var recipe in RecipeList)
    {
      <RecipeCard Recipe="@recipe" EditRecipe="SetEditRecipe" />
    }
  </div>
}

<pre>@ErrorMessage</pre>
@* <pre>@recipeResponse</pre> *@

@code {
  private Recipe recipe = new();
  private string recipeResponse = string.Empty;
  private string RecipeKey = string.Empty;
  private string SearchString = string.Empty;
  private List<Recipe> RecipeList = new();
  private string ErrorMessage = string.Empty;

  private async Task HandleValidSubmit()
  {
    var response = await RecipeApiClient.CreateRecipeAsync(recipe);
    recipeResponse = response;
    recipe = new();
  }

  private async Task Clear()
  {
    RecipeList.Clear();
    recipe = new();
    SearchString = string.Empty;
  }

  private async Task GetRecipes()
  {
    var response = await RecipeApiClient.GetRecipesAsync();
    recipeResponse = string.Join(Environment.NewLine, response.Select(r => $"Key: {r.Key}\n\nName: {r.Name}\n\nIngredients: {r.Ingredients}, Instructions: {r.Steps}"));
    RecipeList.Clear();
    RecipeList.AddRange(response);
  }

  private async Task GetRecipe()
  {
    var response = await RecipeApiClient.GetRecipeAsync(RecipeKey);
    if (response is null)
    {
      ErrorMessage = $"Recipe not found: {RecipeKey}";
      return;
    }
    recipeResponse = $"Key: {response.Key}\n\nName: {response.Name}\n\nIngredients: {response.Ingredients}\n\nInstructions: {response.Steps}";

    RecipeList.Clear();
    RecipeList.Add(response);
  }

  private async Task SearchRecipes()
  {
    var response = await RecipeApiClient.SearchRecipesAsync(SearchString);
    recipeResponse = string.Join(Environment.NewLine, response.Select(r => $"Key: {r.Key}\n\nName: {r.Name}\n\nIngredients: {r.Ingredients}, Instruction: {r.Steps}"));
    RecipeList.Clear();
    RecipeList.AddRange(response);
  }

  private void AddIngredient()
  {
    recipe.Ingredients.Add(string.Empty);
  }

  private void RemoveIngredient(int index)
  {
    recipe.Ingredients.RemoveAt(index);
  }

  private void UpdateIngredient(ChangeEventArgs e, int index)
  {
    recipe.Ingredients[index] = e.Value.ToString();
  }

  private void AddStep()
  {
    recipe.Steps.Add(string.Empty);
  }

  private void RemoveStep(int index)
  {
    recipe.Steps.RemoveAt(index);
  }

  private void UpdateStep(ChangeEventArgs e, int index)
  {
    recipe.Steps[index] = e.Value.ToString();
  }

  private void SetEditRecipe(string recipeKey)
  {
    recipe = RecipeList.First(r => r.Key == recipeKey);
    StateHasChanged();
  }

  public class NewRecipe
  {
    public string Name { get; set; } = string.Empty;
    public string Ingredients { get; set; } = string.Empty;
    public string Instructions { get; set; } = string.Empty;

    public Recipe ToRecipe() => new()
      {
        Key = Guid.NewGuid().ToString(),
        Name = Name,
        Ingredients = [Ingredients],
        Steps = [Instructions]
      };
  }
}