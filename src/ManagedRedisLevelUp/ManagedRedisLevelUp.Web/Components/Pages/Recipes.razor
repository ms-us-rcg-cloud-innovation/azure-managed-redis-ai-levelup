@page "/recipes"
@rendermode InteractiveServer
@using ManagedRedisLevelUp.Shared
@using Microsoft.AspNetCore.Components.Forms
@inject RecipeApiClient RecipeApiClient

<EditForm Model="@recipe" OnValidSubmit="@HandleValidSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div>
    <label for="name">Name:</label>
    <InputText id="name" @bind-Value="@recipe.Name" class="form-control" />
  </div>
  <div>
    <label for="ingredients">Ingredients:</label>
    <InputTextArea id="ingredients" @bind-Value="@recipe.Ingredients" class="form-control" />
  </div>
  <div>
    <label for="instructions">Instructions:</label>
    <InputTextArea id="instructions" @bind-Value="@recipe.Instructions" class="form-control" />
  </div>

  <div class="mt-2">
    <button type="submit" class="btn btn-primary">Submit</button>
  </div>
</EditForm>

<div>
  <label for="key">Recipe Key:</label>
  <input id="key" @bind="@RecipeKey" class="form-control" />
</div>
<button type="button" class="btn btn-secondary" @onclick="GetRecipe">Get Recipe</button>

<pre>@recipeResponse</pre>

@code {
  private NewRecipe recipe = new();
  private string recipeResponse = string.Empty;
  private string RecipeKey = string.Empty;

  private async Task HandleValidSubmit()
  {
    var response = await RecipeApiClient.CreateRecipeAsync(recipe.ToRecipe());
    recipeResponse = response;
  }

  private async Task GetRecipe()
  {
    var response = await RecipeApiClient.GetRecipeAsync(RecipeKey);
    recipeResponse = $"Key: {response.Key}, Name: {response.Name}, Ingredients: {response.Ingredients}, Instruction: {response.Instructions}";
  }

  public class NewRecipe
  {
    public string Name { get; set; } = string.Empty;
    public string Ingredients { get; set; } = string.Empty;
    public string Instructions { get; set; } = string.Empty;

    public Recipe ToRecipe() => new()
      {
        Key = Guid.NewGuid().ToString(),
        Name = Name,
        Ingredients = Ingredients,
        Instructions = Instructions
      };
  }
}